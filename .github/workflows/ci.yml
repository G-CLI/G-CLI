
name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        platform: [x86, x64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: "C Sharp Source/LabVIEW CLI/G CLI.sln"
      Test_Project_Path: "C Sharp Source/LabVIEWCLI_Unit_tests/GCLI_Unit_tests.csproj"

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      
    - name: Setup VSTest.console.exe
      # You may pin to the exact commit or the version.
      # uses: darenm/Setup-VSTest@fbb574e849d6225ce9702f86e64eb6cdc4b4e561
      uses: darenm/Setup-VSTest@v1
      
    - name: Setup NuGet.exe for use with actions
      # You may pin to the exact commit or the version.
      # uses: NuGet/setup-nuget@04b0c2b8d1b97922f67eca497d7cf0bf17b8ffe1
      uses: NuGet/setup-nuget@v1.0.5
      
    - name: Restore NuGet Packages
      run: nuget restore $env:Solution_Name

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: vstest "C Sharp Source/LabVIEWCLI_Unit_tests/bin/${matrix.platform}/Release/GCLI_Unit_tests.dll"
      env:
        Platform: ${{ matrix.platform }}

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /p:Platform=$env:Platform
      env:
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}

